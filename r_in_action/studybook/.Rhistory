options()
options(digits=3)
x <- runif(20)
summary(x)
hist(x)
savehistory()
save.image()
save.image()
help.start()
install.packages("vcd")
help(package = "vcd")
help.start()
install.packages("vcd")
library(vcd)
help(Arthritis)
Arthritis
example(Arthritis)
lmfit <- lm(mpg~wt, data=mtcars)
lmfit
summary(lmfit)
a <- c(1, 2, 5, 3, 6, -2, 4)
b <- c("one", "two", "three")
c <- c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
a
b
c
a <- c(1, 2, 5, 3, 6, -2, 4)
a
a
a[c(1)]
a[c(3)]
y <- matrix(1:20, nrow = 5, ncol = 4)
y
cells <- c(1, 26, 24, 68)
cells
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
rnames
cells
mymatrix <- matrix(cells, nrow = 2, ncol = 2, byrow = TRUE,
dimnames = list(rnames, cnames))
mymatrix
mymatrix <- matrix(cells, nrow = 2, ncol = 2, byrow = FALSE,
dimnames = list(rnames, cnames))
mymatrix
cells
x <- matrix(1:10, nrow = 2)
x
x[2, ]
x[, 2]
x[1, 4]
x[1, c(4, 5)]
dim1 <- c("A1", "A2")
dim2 <- c("B1", "B2", "B3")
dim3 <- c("C1", "C2", "C3", "C4")
z <- array(1:24, c(2, 3, 4), dimnames = list(dim1,
dim2, dim3))
z
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes,
status)
patientdata
patientdata[1:2]
patientdata[c("diabetes", "status")]
patientdata$age
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
diabetes <- factor(diabetes)
diabetes
diabetes
status <- factor(status, order = TRUE)
patientdata <- data.frame(patientID, age, diabetes,
status)
status
patientdata
str(patientdata)
summary(patientdata)
patientdata
patientdata[1,]
patientdata[2,]
patientdata[c(1:3),]
patientdata[c(1:3),3]
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
summary(mpg)
attach(mtcars)
summary(mpg)
plot(mpg, disp)
plot(mpg, wt)
detach(mtcars)
with(mtcars, {
summary(mpf, disp, wt)
plot(mpg, disp)
plot(mpg, wt)
})
with(mtcars, {
summary(mpg, disp, wt)
plot(mpg, disp)
plot(mpg, wt)
})
status <- c("Poor", "Improved", "Excellent", "Poor")
status
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes,
status)
patientdata
str(patientdata)
summary(patientdata)
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
diabetes <- factor(diabetes)
diabetes
patientdata <- data.frame(patientID, age, diabetes,
status)
str(patientdata)
summary(patientdata)
status <- factor(status, order = TRUE)
patientdata <- data.frame(patientID, age, diabetes,
status)
str(patientdata)
summary(patientdata)
g <- "My First List"
h <- c(25, 26, 18, 39)
j <- matrix(1:10, nrow = 5)
k <- c("one", "two", "three")
mylist <- list(title = g, ages = h, j, k)
mylist
mylist
patientdata
patientdata$gender <- factor(patientdata$gender,
levels = c(1,2),
labels = c(“male”, “female”))
patientdata$gender <- factor(patientdata$gender,
levels = c(1,2),
labels = c('male', 'female'))
patientdata
patientdata$gender <- factor(patientdata$gender,
levels = c(1,2, 1, 2),
labels = c('male', 'female','male', 'female'))
patientdata$gender
patientdata
df <- mtcars
head(df)
tail(df)
summary(df)
length(df)
df$counter <- c(1:11)
dim(df)
df$counter <- c(1:32)
df
df <- rbind(c(1:11))
tail(df)
df <- cbind(c(1:32))
df
df <- mtcars
df <- rbind(c(1:11))
df
df <- mtcars
df <- rbind(df, c(1:11))
df
df <- cbind(df, c(1:32))
df <- cbind(df, c(1:33))
df
#-----------------------------------------------------#
# R in Action: Chapter 3                              #
# requires that the Hmisc package has been installed  #
install.packages('Hmisc')                           #
# pause after each graph
par(ask = TRUE)
attach(mtcars)
plot(wt, mpg)
title("Regression of MPG on Weight")
detach(mtcars)
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type = "b")
pdf('mygraph.pdf')
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title('Regression of MPG on Weight')
detach(mtcars)
dev.off()
library(doBy)
summaryBy(mpg + hp + wt ~ am, data = mtcars, FUN = mystats)
mystats <- function(x, na.omit = FALSE) {
if (na.omit)
x <- x[!is.na(x)]
m <- mean(x)
n <- length(x)
s <- sd(x)
skew <- sum((x - m)^3/s^3)/n
kurt <- sum((x - m)^4/s^4)/n - 3
return(c(n = n, mean = m, stdev = s, skew = skew, kurtosis = kurt))
}
summaryBy(mpg + hp + wt ~ am, data = mtcars, FUN = mystats)
library(psych)
describe.by(mtcars[vars], mtcars$am)
describeBy(mtcars[vars], mtcars$am)
vars <- c("mpg", "hp", "wt")
describeBy(mtcars[vars], mtcars$am)
library(reshape)
dstats <- function(x) (c(n = length(x), mean = mean(x),
sd = sd(x)))
dfm <- melt(mtcars, measure.vars = c("mpg", "hp",
"wt"), id.vars = c("am", "cyl"))
dfm
cast(dfm, am + cyl + variable ~ ., dstats)
dfm
head(dfm)
head(cast(dfm, am + cyl + variable ~ ., dstats))
mytable <- with(Arthritis, table(Improved))
mytable <- with(Arthritis, table(Improved))
mytable
# get Arthritis data
library(vcd)
mytable <- with(Arthritis, table(Improved))
mytable
Arthritis
table(Improved)
mytable
Arthritis
head(Arthritis)
table(Improved)
mytable
prop.table(mytable)*100
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
margin.table(mytable, 1)
prop.table(mytable, 1)
margin.table(mytable, 2)
prop.table(mytable, 2)
prop.table(mytable)
addmargins(mytable)
admargins(prop.table(mytable))
addmargins(prop.table(mytable, 1), 2)
library(gmodels)
CrossTable(Arthritis$Treatment, Arthritis$Improved)
mytable <- xtabs(~Treatment+Improved, data=Arthritis)
mytable
chisq.test(mytable)
mytable <- xtabs(~Improved+Sex, data=Arthritis)
chisq.test(mytable)
mytable
mytable <- xtabs(Improved+Sex, data=Arthritis)
mytable <- xtabs(~Improved+Sex, data=Arthritis)
mytable <- xtabs(~Treatment+Improved, data=Arthritis)
fisher.test(mytable)
mytable
mytable <- xtabs(~Treatment+Improved, data=Arthritis)
mytable
fisher.test(mytable)
mytable <- xtabs(~Improved+Sex, data=Arthritis)
mytable
mytable <- xtabs(~Treatment+Improved+Sex, data=Arthritis)
mytable
states <- state.x77[, 1:6]
cov(states)
cor(states)
cor(states, method="spearman")
x <- states[, c("Population", "Income", "Illiteracy", "HS Grad")]
y <- states[, c("Life Exp", "Murder")]
cor(x, y)
library(ggm)
pcor(c(1, 5, 2, 3, 6), cov(states))
library(MASS)
t.test(Prob ~ So, data=UScrime)
library(MASS)
sapply(UScrime[c("U1", "U2")], function(x) (c(mean = mean(x),
sd = sd(x))))
with(UScrime, t.test(U1, U2, paired = TRUE))
with(UScrime, by(Prob, So, median))
wilcox.test(Prob ~ So, data=UScrime)
sapply(UScrime[c("U1", "U2")], median)
with(UScrime, wilcox.test(U1, U2, paired = TRUE))
with(UScrime, by(Prob, So, median))
wilcox.test(Prob ~ So, data=UScrime)
sapply(UScrime[c("U1", "U2")], median)
with(UScrime, wilcox.test(U1, U2, paired = TRUE))
states <- as.data.frame(cbind(state.region, state.x77))
kruskal.test(Illiteracy ~ state.region, data=states)
class <- state.region
var <- state.x77[, c("Illiteracy")]
mydata <- as.data.frame(cbind(class, var))
rm(class,var)
library(npmc)
install.packages("npmc")
library(npmc)
fit <- lm(weight ~ height, data = women)
summary(fit)
women$weight
fitted(fit)
residuals(fit)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in pounds)")
# add the line of best fit
abline(fit)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in pounds)")
# add the line of best fit
abline(fit)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in pounds)")
# add the line of best fit
abline(fit)
fit2 <- lm(weight ~ height + I(height^2), data = women)
summary(fit2)
plot(women$height, women$weight, main = "Women Age 30-39",
xlab = "Height (in inches)", ylab = "Weight (in lbs)")
lines(women$height, fitted(fit2))
library(car)
scatterplot(weight ~ height, data = women, spread = FALSE,
lty.smooth = 2, pch = 19, main = "Women Age 30-39", xlab = "Height (inches)",
ylab = "Weight (lbs.)")
states <- as.data.frame(state.x77[, c("Murder", "Population",
"Illiteracy", "Income", "Frost")])
cor(states)
library(car)
scatterplotMatrix(states, spread = FALSE, lty.smooth = 2,
main = "Scatterplot Matrix")
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
fit <- lm(mpg ~ hp + wt + hp:wt, data = mtcars)
summary(fit)
library(effects)
plot(effect("hp:wt", fit, list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
library(effects)
plot(effect("hp:wt", fit, list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data=states)
confint(fit)
plot(effects::effect("hp:wt", fit, list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
plot(effect("hp:wt", fit, xlevels=list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
fit <- lm(mpg ~ hp + wt + hp:wt, data = mtcars)
plot(effect("hp:wt", fit, xlevels=list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
fit <- lm(weight ~ height, data = women)
par(mfrow = c(2, 2))
plot(fit)
fit <- lm(weight ~ height, data = women)
par(mfrow = c(2, 2))
plot(effect("hp:wt", fit, xlevels=list(wt = c(2.2, 3.2, 4.2))),
multiline = TRUE)
scatterplot(weight ~ height, data = women, spread = FALSE,
lty.smooth = 2, pch = 19, main = "Women Age 30-39", xlab = "Height (inches)",
ylab = "Weight (lbs.)")
fit <- lm(weight ~ height, data = women)
par(mfrow = c(2, 2))
plot(fit)
newfit <- lm(weight ~ height + I(height^2), data = women[-c(13, 15),])
par(mfrow = c(2, 2))
plot(newfit)
library(car)
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
qqPlot(fit, labels = FALSE, simulate = TRUE, main = "Q-Q Plot")
# Listing 8.6 Function for plotting studentized residuals
residplot <- function(fit, nbreaks=10) {
z <- rstudent(fit)
hist(z, breaks=nbreaks, freq=FALSE,
xlab="Studentized Residual",
main="Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)),
add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y,
col="red", lwd=2, lty=2)
legend("topright",
legend = c( "Normal Curve", "Kernel Density Curve"),
lty=1:2, col=c("blue","red"), cex=.7)
}
residplot(fit)
durbinWatsonTest(fit)
library(car)
crPlots(fit, one.page = TRUE, ask = FALSE)
library(car)
ncvTest(fit)
library(gvlma)
gvmodel <- gvlma(fit)
summary(gvmodel)
vif(fit)
sqrt(vif(fit)) > 2
outlierTest(fit)
hat.plot <- function(fit){
p <- length(coefficients(fit))
n <- length(fitted(fit))
plot(hatvalues(fit), main = "Index Plot of Hat Values")
abline(h = c(2, 3) * p/n, col = "red", lty = 2)
identify(1:n, hatvalues(fit), names(hatvalues(fit)))
}
hat.plot(fit)
cutoff <- 4/(nrow(states) - length(fit$coefficients) - 2)
plot(fit, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
cutoff <- 4/(nrow(states) - length(fit$coefficients) - 2)
n
cutoff <- 4/(nrow(states) - length(fit$coefficients) - 2)
plot(fit, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
library(car)
summary(powerTransform(states$Murder))
library(car)
boxTidwell(Murder ~ Population + Illiteracy, data = states)
relweights <- function(fit, ...) {
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
# correlations between original predictors and new orthogonal variables
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda^2
# regression coefficients of Y on orthogonal variables
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta^2)
rawwgt <- lambdasq %*% beta^2
import <- (rawwgt/rsquare) * 100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
# plot results
barplot(t(import), names.arg = lbls, ylab = "% of R-Square",
xlab = "Predictor Variables", main = "Relative Importance of Predictor Variables",
sub = paste("R-Square = ", round(rsquare, digits = 3)),
...)
return(import)
}
fit <- lm(Murder ~ Population + Illiteracy + Income +
Frost, data = states)
relweights(fit, col = "lightgrey")
library(multcomp)
attach(cholesterol)
library(multcomp)
attach(cholesterol)
attach(cholesterol)
table(trt)
aggregate(response, by = list(trt), FUN = mean)
aggregate(response, by = list(trt), FUN = sd)
fit <- aov(response ~ trt)
summary(fit)
library(gplots)
plotmeans(response ~ trt, xlab = "Treatment", ylab = "Response",
main = "Mean Plot\nwith 95% CI")
detach(cholesterol)
library(multcomp)
attach(cholesterol)
table(trt)
aggregate(response, by = list(trt), FUN = mean)
aggregate(response, by = list(trt), FUN = sd)
fit <- aov(response ~ trt)
summary(fit)
library(gplots)
plotmeans(response ~ trt, xlab = "Treatment", ylab = "Response",
main = "Mean Plot\nwith 95% CI")
detach(cholesterol)
attach(cholesterol)
table(trt)
aggregate(response, by = list(trt), FUN = mean)
aggregate(response, by = list(trt), FUN = sd)
fit <- aov(response ~ trt)
summary(fit)
library(gplots)
plotmeans(response ~ trt, xlab = "Treatment", ylab = "Response",
main = "Mean Plot\nwith 95% CI")
detach(cholesterol)
TukeyHSD(fit)
par(las = 2)
par(mar = c(5, 8, 4, 2))
plot(TukeyHSD(fit))
par(opar)
library(multcomp)
par(mar = c(5, 4, 6, 2))
tuk <- glht(fit, linfct = mcp(trt = "Tukey"))
plot(cld(tuk, level = 0.05), col = "lightgrey")
par(opar)
library(car)
qqPlot(lm(response ~ trt, data = cholesterol), simulate = TRUE,
main = "QQ Plot", labels = FALSE)
bartlett.test(response ~ trt, data = cholesterol)
library(car)
outlierTest(fit)
data(litter, package = "multcomp")
attach(litter)
table(dose)
aggregate(weight, by = list(dose), FUN = mean)
fit <- aov(weight ~ gesttime + dose)
summary(fit)
table(dose)
aggregate(weight, by = list(dose), FUN = mean)
fit <- aov(weight ~ gesttime + dose)
summary(fit)
library(effects)
effect("dose", fit)
