summary(Model4)
Model2 <- lmer(normexam ~ standLRT + (1|school), REML = FALSE, data=Exam)
summary(Model2)
Model0 <- lmer(normexam ~ 1 + (1|school), REML = FALSE, data = Exam)
summary(Model0)
anova(Model0, Model2)
library(lmerTest)
Model2 <- lmer(normexam ~ standLRT + (1|school), data=Exam)
summary(Model2)
Exam$school_type <- ifelse(Exam$type == 'Mxd', 1, 0)
Model5 <- glmer(school_type ~ normexam + (1|school), family = "binomial", data = Exam)
summary(Model5)
predict(Model2, Exam)
new_Exam <- Exam[sample(1:nrow(Exam), 100), ]
new_Exam$school <- sample(101:200)
View(new_Exam)
predict(Model2, new_Exam, allow.new.levels = T)
predict(Model2, new_Exam, allow.new.levels = T)
new_Exam <- Exam[sample(1:nrow(Exam), 100), ]
predict(Model2, new_Exam, allow.new.levels = T)
View(new_Exam)
fixef(Model3)
ranef(Model3)
my_vector1  <- 1:67
my_vector2  <- c(-32, 45, 67, 12.78, 129, 0, -65)
my_vector1[1]
my_vector1[3]
my_vector2[2]
my_vector2[c(1,2,3)]
my_vector2[1:3]
my_vector2[c(1,5,6,7,10)]
my_vector1 + 10
my_vector2 + 56
my_vector2 == 0
my_vector1 > 30
x  <- 23
my_vector1 > 23
x == 23
my_vector2 > 0
my_vector2[my_vector2 > 0]
my_vector2[my_vector2 < 0]
my_vector2[my_vector2 == 0]
my_vector1[my_vector1 > 20 & my_vector1 < 30]
my_numbers  <- my_vector1[my_vector1 > 20 & my_vector1 < 30]
positive_numbers  <- my_vector2[my_vector2 > 0]
v1  <- c(165, 178, 180, 181, 167, 178, 187, 167, 187)
mean_v1  <- mean(v1)
v1[v1 > mean_v1]
greater_than_mean  <- v1[v1 > mean_v1]
#Step 13: Lists and dataframes
age  <- c(16, 18, 22, 27)
is_maried  <- c(F, F, T, T)
name  <- c("Olga", "Maria", "Nastya", "Polina")
my_data  <- data.frame(Name = name, Age = age, Status = is_maried)
my_data
?read.table
?read.csv
mydata <- read.csv('evals.csv')
head(mydata, 3)
tail(mydata)
?read.csv
mydata <- read.csv2('evals.csv')
setwd("~/Dropbox/work/statistics_r/stepik_r_data-analysis")
mydata <- read.csv2('evals.csv')
mydata
setwd('./')
mydata <- read.csv2('evals.csv')
setwd("~/Dropbox/work/statistics_r/stepik_r_data-analysis")
head(mydata)
View(mydata)
mydata <- read.csv2('evals.csv', sep=',')
head(mydata, 3)
tail(mydata)
View(mydata)
str(mydata)
summary(mydata)
mydata$score
b <- mydata$score
b
mean(mydata$score)
summary(mydata$score)
mean(mydata$score)
mydata$ten_point_scale <- mydata$score * 2
b <- mydata$score
summary(mydata$score)
mean(mydata$score)
mean(mydata$score, na.rm = T)
mean(mydata$score, na.rm = TRUE)
summary(mydata$score)
summary(mydata$ten_point_scale)
mydata$new_varible <- 0
mydata$number <- 1:nrow(mydata)
summary(mydata$number)
nrow(mydata)
ncol(mydata)
mydata$score[1:10]
mydata[1,1]
mydata[c(2,193,225),1]
mydata[101:200,1]
mydata[5,]
mydata[,1] == mydata$score
mydata$gender
mydata$gender == 'female'
head(mydata[mydata$gender == 'female',1:3])
head(subset(mydata, gender == 'female'))
head(subset(mydata, score > 3.5))
head(subset(mydata, gender == 'female'))
head(mydata[mydata$gender == 'female',1:3])
mydata$gender
mydata$gender == 'female'
head(mydata[mydata$gender == 'female',1:3])
head(subset(mydata, gender == 'female'))
mydata2 <- subset(mydata, gender == 'female')
mydata2
mydata3 <- subset(mydata, gender == 'male')
mydata3
mydata4
mydata4 <- rbind(mydata2, mydata3)
mydata5 <- mydata[,1:10]
mydata5
mydata7 <- cbind(mydata6, mydata5)
mydata6 <- mydata[,11:24]
mydata5 <- mydata[,1:10]
mydata6 <- mydata[,11:24]
mydata2 <- subset(mydata, gender == 'female')
mydata3 <- subset(mydata, gender == 'male')
head(mydata)
nrow(mydata)
ncol(mydata)
mydata5 <- mydata[,1:10]
mydata6 <- mydata[,11:24]
mydata6 <- mydata[,11:23]
mydata7 <- cbind(mydata6, mydata5)
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
df  <- mtcars
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
head(df)
median(df$mpg)
mean(df$disp)
sd(df$hp)
range(df$cyl)
mean_disp  <- mean(df$disp)
mean(df$mpg[df$cyl == 6])
mean(df$mpg[df$cyl == 6 & df$vs == "V"])
sd(df$hp[df$cyl != 3 & df$am == "Auto"])
?aggregate
colnames(mean_hp_vs)  <- c("VS", "Mean HP")
mean_hp_vs  <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)
mean_hp_vs
aggregate(hp ~ vs, df, mean)
aggregate(hp ~ vs + am, df, mean)
aggregate(x = df$hp, by = list (df$vs, df$am), FUN = mean)
df$am
list(df$am)
aggregate(x = df[,-c(8,9)], by = list(df$am), FUN = median)
aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
my_stats  <- aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
library(psych)
describe(x = df)
descr2  <- describeBy(x = df[,-c(8,9)], group = df$vs)
descr2$V
descr2$S
descr2  <- describeBy(x = df[,-c(8,9)], group = df$vs, mat = T, digits = 1)
descr3  <- describeBy(x = df[,-c(8,9)], group = df$vs, mat = T, digits = 1, fast = T)
describeBy(df$qsec, group = list(df$vs, df$am), digits = 1,
fast = T)
sum(is.na(df))
df$mpg[1:10]  <- NA
mean(df$mpg, na.rm = T)
aggregate(mpg ~am, df, sd)
describe(na.rm = )
df  <- mtcars
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(mpg ~ am, df, ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
plot(~ mpg + hp, df)
library(ggplot2)
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am))+
geom_density(alpha = 0.5)+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG density plot")
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot()+
xlab("Transmission type")+
ylab("Gross horsepower")+
scale_fill_discrete(name="Engine type")+
ggtitle("Gross horsepower and engine type")
ggplot(df, aes(x = mpg, y = hp, size = qsec))+
geom_point()+
xlab("Miles/(US) gallon")+
ylab("Gross horsepower")+
scale_size_continuous(name="1/4 mile time")+
ggtitle("Miles/(US) gallon and Gross horsepower")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2 + geom_boxplot()
df <- read.csv("grants.csv")
str(df)
df$status <- as.factor(df$status)
levels(df$status) <- c("Not funded", "Funded")
df$status <- factor(df$status, labels = c("Not funded", "Funded"))
# 1d Table
t1 <- table(df$status)
t1
dim(t1)
# 2d Table
t2 <- table(df$status, df$field)
t2
t2 <- table(status = df$status, field = df$field)
dim(t2)
prop.table(t2)
prop.table(t2, 1)
prop.table(t2, 2)
# 3d Table
t3 <- table(Years = df$years_in_uni, Field = df$field, Status = df$status)
t3
dim(t3)
barplot(t1)
barplot(t2)
barplot(t2, legend.text = TRUE, args.legend = list(x = "topright"))
barplot(t2, legend.text = TRUE, args.legend = list(x = "topright"), beside = TRUE)
mosaicplot(t2)
binom.test(x = 5, n = 20, p = 0.5)
binom.test(t1)
# Binomial Test
binom.test(x = 5, n = 20, p = 0.5)
# Chi-Square
t1
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp
chi$obs
t2
chisq.test(t2)
fisher.test(t2)
?iris
df  <- iris
str(df)
df1  <- subset(df, Species != "setosa")
str(df1)
table(df1$Species)
hist(df1$Sepal.Length)
ggplot(df1, aes(x =Sepal.Length ))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)+
facet_grid(Species ~ .)
ggplot(df1, aes(Sepal.Length, fill = Species ))+
geom_density(alpha = 0.5)
ggplot(df1, aes(Species, Sepal.Length))+
geom_boxplot()
shapiro.test(df1$Sepal.Length)
shapiro.test(df1$Sepal.Length[df1$Species == "versicolor"])
shapiro.test(df1$Sepal.Length[df1$Species == "virginica"])
#The same result in one line
by(df1$Sepal.Length, INDICES = df1$Species, shapiro.test)
bartlett.test(Sepal.Length  ~ Species, df1)
t.test(Sepal.Length  ~ Species, df1)
test1  <- t.test(Sepal.Length  ~ Species, df1)
str(test1)
test1$p.value
t.test(Sepal.Length  ~ Species, df1, var.equal = T)
t.test(df1$Sepal.Length, mu = 8)
t.test(df1$Petal.Length, df1$Petal.Width, paired = T)
ggplot(df1, aes(Species, Sepal.Length))+
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
width = 0.1)+
stat_summary(fun.y = mean, geom = "point", size = 4)
ggplot(df1, aes(Species, Sepal.Length))+
stat_summary(fun.data = mean_cl_normal, geom = "pointrange",
size = 2)
?wilcox.test
test2  <- wilcox.test(Petal.Length ~ Species, df1)
pv  <- test2$p.value
ggplot(df1, aes(Species, Petal.Length))+
geom_boxplot()
wilcox.test(df1$Petal.Length, df1$Petal.Width, paired = T)
paired_wtest  <- wilcox.test(df1$Petal.Length, df1$Petal.Width, paired = T)
paired_wtest$p.value
library(ggplot2)
DV ~ IV # One-way
DV ~ IV1 + IV2 # Two-way
DV ~ IV1:IV2  # Two-way interaction
DV ~ IV1 + IV2 + IV1:IV2 # Main effects + interaction
DV ~ IV1 * IV2  # The same: Main effects + interaction
DV ~ IV1 + IV2 + IV3 + IV1:IV2
DV ~ (IV1 + IV2 + IV3)^2 # main effects and all possible interactions up to level 2
DV ~ IV1 + Error(subject/IV1) # repeated measures
mydata <- read.csv('shops.csv')
boxplot(price ~ origin, data=mydata)
ggplot(mydata, aes(x = origin, y = price)) +
geom_boxplot()
fit <- aov(price ~ origin, data=mydata)
summary(fit)
fit1 <- aov(price ~ origin + store, data=mydata)
summary(fit1)
model.tables(fit1,"means")
pd = position_dodge(0.1)
ggplot(mydata, aes(x = store, y = price, color = origin, group = origin)) +
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0.2, lwd = 0.8, position = pd)+
stat_summary(fun.data = mean_cl_boot, geom = 'line', size = 1.5, position = pd) +
stat_summary(fun.data = mean_cl_boot, geom = 'point', size = 5, position = pd, pch=15) +
theme_bw()
fit3 <- aov(price ~ origin + store + origin:store, data=mydata)
summary(fit3)
fit4 <- aov(price ~ origin * store, data=mydata)
summary(fit4)
ggplot(mydata, aes(x = food, y = price)) +
geom_boxplot()
fit5 <- aov(price ~ food, data=mydata)
summary(fit5)
TukeyHSD(fit5)
df  <- mtcars
df_numeric  <- df[, c(1,3:7)]
pairs(df_numeric)
cor(df_numeric)
fit  <- corr.test(df_numeric)
fit$r
fit$p
fit$adjust
library(ggplot2)
data(swiss)
str(swiss)
# relationships between all variables
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
swiss$Examination_squared <- (swiss$Examination)^2
lm2 <- lm(Education ~ Examination + Examination_squared, swiss)
summary(lm2)
anova(lm2, lm1)
swiss$lm1_fitted <- lm1$fitted
swiss$lm2_fitted <- lm2$fitted
swiss$lm1_resid <- lm1$resid
swiss$lm2_resid <- lm2$resid
swiss$obs_number <- 1:nrow(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point(size = 3) +
geom_line(aes(x = Examination, y = lm1_fitted), col = 'red', lwd=1) +
geom_line(aes(x = Examination, y = lm2_fitted), col = 'blue', lwd=1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) +
geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) +
geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) +   geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = obs_number, y = lm1_resid)) +
geom_point(size = 3) + geom_smooth()
ggplot(swiss, aes(x = obs_number, y = lm2_resid)) +
geom_point(size = 3) + geom_smooth()
fit5 <- lm(Fertility ~ religious*Infant.Mortality*Examination, data = swiss)
rm(swiss)
swiss <- data.frame(swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
summary(fit_reduced1)
anova(fit_full, fit_reduced1)
fit_reduced2 <- lm(Fertility ~ Infant.Mortality + Education + Catholic + Agriculture, data = swiss)
summary(fit_reduced2)
anova(fit_full, fit_reduced2)
optimal_fit <-  step(fit_full, direction = 'backward')
summary(optimal_fit)
boot_np  <- function(data, Nboot=500) {
boots <- numeric(Nboot)
for (i in 1:Nboot) {
boots[i] <- mean(sample(data, replace = T)) }
CI <- quantile(boots, prob = c(0.025, 0.975))
return(c(m = mean(data), CI))
}
x <- c(5, 5, 8, 10, 10, 10, 19, 20, 20, 20, 30, 40, 42, 50, 50)
boot_np(x)
M <- matrix(seq(1, 16), 4, 4)
M
apply(M, 1, min)
apply(M, 1, max)
x <- list(a = 1, b=1:3, c=10:100)
lapply(x, FUN = length)
lapply(x, FUN = sum)
sapply(x, FUN = length)
sapply(x, FUN = sum)
d <- cars  # встроенный набор данных по машинам
glimpse(d)  # что там?
# подключаем пакеты
library(tidyverse) # графики + манипуляции с данными, включает dplyr, ggplot2, ...
library(skimr) # описательные статистики — стильная замена для psych
library(GGally)  # ещё графики
glimpse(d)  # что там?
help(cars)  # справка. действует для встроенных наборов данных
head(d)  # начало таблички d (первые 6 строк)
tail(d)  # хвостик таблички d
skim(d)  # среднее, мода, медиана и т.д. (в видеолекция decribe() из пакета psych)
ncol(d)  # число столбцов
nrow(d)  # число строк
str(d)  # структура (похоже на glimpse)
# среднее арифметическое
mean(d$speed)
# создадим новую переменные и поместим их все в табличку d2
d2 <- mutate(d, speed = 1.61 * speed, dist = 0.3 * dist, ratio = dist/speed)
glimpse(d2)
# графики
qplot(data = d2, dist)
qplot(data = d2, dist, xlab = "Длина тормозного пути (м)", ylab = "Число машин",
main = "Данные по машинам 1920х")
library("memisc")  # две и более регрессий в одной табличке
library("psych")  # описательные статистики
library("lmtest")  # тестирование гипотез в линейных моделях
library("sjPlot")  # графики
library("sgof")
library("foreign")  # загрузка данных в разных форматах
library("car")
library("hexbin")  # графики
library("tidyverse") # вместо ggplot2 (графики) и dplyr (манипуляции с данными)
library("rlms")  # загрузка данных в формате rlms (spss)
library("memisc")  # две и более регрессий в одной табличке
library("psych")  # описательные статистики
library("lmtest")  # тестирование гипотез в линейных моделях
library("sjPlot")  # графики
library("sgof")
library("foreign")  # загрузка данных в разных форматах
library("car")
library("hexbin")  # графики
library("tidyverse") # вместо ggplot2 (графики) и dplyr (манипуляции с данными)
library("rlms")  # загрузка данных в формате rlms (spss)
# генерируем случайные величины Z_1, ...., Z_100 ~ N(5, 9)
z <- rnorm(100, mean = 5, sd = 3)
z[56]  # z номер 56
z[2:9]  # вектор из z_2, ..., z_9
qplot(z)  # гистограмма
# генерируем случайные величины Z_1, ...., Z_100 ~ N(5, 9)
z <- rnorm(100, mean = 5, sd = 3)
z
z[56]  # z номер 56
z[2:9]  # вектор из z_2, ..., z_9
qplot(z)  # гистограмма
x <- seq(-10, 15, by = 0.5)  # задаем последовательности чисел от -10 до 15 с шагом 0.5
x
y <- dnorm(x, mean = 5, sd = 3)  # считаем в этих точках значение плотности для N(5,3^2)
y
qplot(x, y, geom = "line")  # график линией
qplot(z)  # гистограмма
# генерируем случайные величины Z_1, ...., Z_100 ~ N(5, 9)
z <- rnorm(100, mean = 5, sd = 3)
qplot(z)
qplot(z, geom="line")
qplot(z)
# Найдем P(Z<3) P(Z<3)=F(3). Данная вероятность --- это функция распределения
pnorm(3, mean = 5, sd = 3)
# Найдем P(Z \in [4;9]) P(Z<9)-P(Z<4). Данная вероятность --- разность функций
# распределения
pnorm(9, mean = 5, sd = 3) - pnorm(4, mean = 5, sd = 3)
# Найдем а, при котором P(Z<a)=0.7.
qnorm(0.7, mean = 5, sd = 3)
x
y <- dnorm(x, mean = 5, sd = 3)  # считаем в этих точках значение плотности для N(5,3^2)
y
dnorm(x, mean = 5, sd = 3)
qplot(x)  # гистограмма
qplot(x, y)  # график точками
qplot(x, y, geom = "line")  # график линией
# Найдем P(Z \in [4;9]) P(Z<9)-P(Z<4). Данная вероятность --- разность функций
# распределения
pnorm(9, mean = 5, sd = 3) - pnorm(4, mean = 5, sd = 3)
h <- swiss  # набор данных по кантонам Швейцарии (встроенный в R)
h <- swiss  # набор данных по кантонам Швейцарии (встроенный в R)
glimpse(h)  # бросим взгляд на данные
help(swiss)
View(swiss)
# оценим модель множественной регрессии
model <- lm(data = h, Fertility ~ Catholic + Agriculture + Examination)
# посмотрим результаты оценивания
summary(model)
